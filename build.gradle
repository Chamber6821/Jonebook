plugins {
    id 'org.springframework.boot' version '2.7.5'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'java'
    id 'war'
    id 'checkstyle'
    id 'jacoco'
    id 'org.sonarqube' version '4.4.1.3373'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    implementation 'org.postgresql:postgresql'
    implementation 'javax.servlet:jstl'
    implementation 'org.springframework.security:spring-security-taglibs'

    providedRuntime 'org.apache.tomcat.embed:tomcat-embed-jasper'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'io.springfox:springfox-boot-starter:3.0.0'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

war {
    enabled = false
}

bootWar {
    enabled = true
    archiveName 'app.war'
}

test() {
	useJUnitPlatform()
	testLogging.showStandardStreams = true
	testLogging {
		events "passed", "skipped", "failed"
	}
	finalizedBy(jacocoTestReport)
}

jacocoTestReport() {
	dependsOn test
	reports {
		xml.required = true
	}
}

jacoco {
	toolVersion = "0.8.10"
}

sonar {
	properties {
		property "sonar.projectKey", "Chamber6821_Jonebook"
		property "sonar.organization", "chamber6821"
		property "sonar.host.url", "https://sonarcloud.io"
	}
}
